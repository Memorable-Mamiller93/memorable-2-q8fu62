version: "3.8"

# Global project name and build settings
x-project-name: &project-name memorable-prod
x-build-args: &build-args
  DOCKER_BUILDKIT: 1
  BUILDKIT_INLINE_CACHE: 1

# Common configurations to be reused
x-service-defaults: &service-defaults
  restart: unless-stopped
  logging:
    driver: "json-file"
    options:
      max-size: "100m"
      max-file: "3"
  networks:
    - memorable_prod_network

# Security and resource limits defaults
x-security-opts: &security-opts
  security_opt:
    - no-new-privileges:true
  ulimits:
    nofile:
      soft: 65536
      hard: 65536
  init: true

services:
  # AI Service Configuration
  ai-service:
    build:
      context: ./src/backend/services/ai
      dockerfile: Dockerfile
      args:
        <<: *build-args
    <<: [*service-defaults, *security-opts]
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '8'
          memory: 16G
        reservations:
          cpus: '4'
          memory: 8G
    environment:
      - NODE_ENV=production
      - PORT=8000
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    depends_on:
      - redis
      - prometheus

  # Auth Service Configuration
  auth-service:
    build:
      context: ./src/backend/services/auth
      dockerfile: Dockerfile
      args:
        <<: *build-args
    <<: [*service-defaults, *security-opts]
    deploy:
      replicas: 3
      resources:
        limits:
          cpus: '2'
          memory: 4G
        reservations:
          cpus: '1'
          memory: 2G
    environment:
      - NODE_ENV=production
      - PORT=3001
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      - postgres
      - redis

  # Book Service Configuration
  book-service:
    build:
      context: ./src/backend/services/book
      dockerfile: Dockerfile
      args:
        <<: *build-args
    <<: [*service-defaults, *security-opts]
    deploy:
      replicas: 3
      resources:
        limits:
          cpus: '4'
          memory: 8G
        reservations:
          cpus: '2'
          memory: 4G
    environment:
      - NODE_ENV=production
      - PORT=3002
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      - postgres
      - redis

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    <<: [*service-defaults, *security-opts]
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    deploy:
      resources:
        limits:
          cpus: '4'
          memory: 8G
        reservations:
          cpus: '2'
          memory: 4G
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 30s
      timeout: 5s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7.0-alpine
    <<: [*service-defaults, *security-opts]
    command: redis-server --requirepass ${REDIS_PASSWORD} --maxmemory 4gb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G
        reservations:
          cpus: '1'
          memory: 2G
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:v2.45.0
    <<: [*service-defaults, *security-opts]
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=15d'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G

  # Grafana Monitoring UI
  grafana:
    image: grafana/grafana:9.5.0
    <<: [*service-defaults, *security-opts]
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G

networks:
  memorable_prod_network:
    driver: overlay
    attachable: true
    driver_opts:
      encrypted: "true"

volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: nfs
      o: addr=${NFS_SERVER},nolock,soft,rw
      device: ":/exports/postgres"
  redis_data:
    driver: local
    driver_opts:
      type: nfs
      o: addr=${NFS_SERVER},nolock,soft,rw
      device: ":/exports/redis"
  prometheus_data:
    driver: local
  grafana_data:
    driver: local