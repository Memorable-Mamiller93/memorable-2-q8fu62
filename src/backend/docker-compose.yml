version: '3.8'

# Global settings
x-logging: &default-logging
  driver: "json-file"
  options:
    max-size: "100m"
    max-file: "3"

x-healthcheck: &default-healthcheck
  interval: 30s
  timeout: 10s
  retries: 3
  start_period: 5s

services:
  # AI Service Configuration
  ai-service:
    build:
      context: ./services/ai
      dockerfile: Dockerfile
      args:
        BUILDKIT_INLINE_CACHE: "1"
    image: memorable/ai-service:latest
    container_name: memorable-ai-service
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - PORT=8000
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - SD_API_KEY=${SD_API_KEY}
      - REDIS_URL=redis://redis:6379
      - PROMETHEUS_METRICS=true
    ports:
      - "8000:8000"
    deploy:
      resources:
        limits:
          cpus: '8'
          memory: 16G
          nvidia.com/gpu: 1
        reservations:
          cpus: '4'
          memory: 8G
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      <<: *default-healthcheck
    logging: *default-logging
    networks:
      - backend
    depends_on:
      - redis
      - prometheus

  # Auth Service Configuration
  auth-service:
    build:
      context: ./services/auth
      dockerfile: Dockerfile
      args:
        BUILDKIT_INLINE_CACHE: "1"
    image: memorable/auth-service:latest
    container_name: memorable-auth-service
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - PORT=3001
      - JWT_SECRET=${JWT_SECRET}
      - REDIS_URL=redis://redis:6379
      - POSTGRES_URL=postgres://postgres:${POSTGRES_PASSWORD}@postgres:5432/memorable
    ports:
      - "3001:3001"
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G
        reservations:
          cpus: '1'
          memory: 2G
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3001/health"]
      <<: *default-healthcheck
    logging: *default-logging
    networks:
      - backend
    depends_on:
      - postgres
      - redis

  # Book Service Configuration
  book-service:
    build:
      context: ./services/book
      dockerfile: Dockerfile
      args:
        BUILDKIT_INLINE_CACHE: "1"
    image: memorable/book-service:latest
    container_name: memorable-book-service
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - PORT=3002
      - POSTGRES_URL=postgres://postgres:${POSTGRES_PASSWORD}@postgres:5432/memorable
      - REDIS_URL=redis://redis:6379
      - S3_BUCKET=${S3_BUCKET}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
    ports:
      - "3002:3002"
    deploy:
      resources:
        limits:
          cpus: '4'
          memory: 8G
        reservations:
          cpus: '2'
          memory: 4G
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      <<: *default-healthcheck
    logging: *default-logging
    networks:
      - backend
    depends_on:
      - postgres
      - redis

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: memorable-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=memorable
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      <<: *default-healthcheck
    logging: *default-logging
    networks:
      - backend

  # Redis Cache
  redis:
    image: redis:7.0-alpine
    container_name: memorable-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD} --maxmemory 2gb --maxmemory-policy allkeys-lru
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      <<: *default-healthcheck
    logging: *default-logging
    networks:
      - backend

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: memorable-prometheus
    restart: unless-stopped
    volumes:
      - prometheus_data:/prometheus
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=15d'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - "9090:9090"
    networks:
      - backend

  # Grafana Visualization
  grafana:
    image: grafana/grafana:9.5.3
    container_name: memorable-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    networks:
      - backend

networks:
  backend:
    driver: bridge
    name: memorable_backend
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16
    driver_opts:
      encrypted: "true"

volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      device: /data/postgres
      o: bind
  redis_data:
    driver: local
    driver_opts:
      type: none
      device: /data/redis
      o: bind
  prometheus_data:
    driver: local
  grafana_data:
    driver: local