# Continuous Deployment Workflow for Memorable Platform
# Version: 1.0.0
# Implements Blue/Green for staging and Canary for production deployments

name: CD

# Trigger on successful CI workflow completion or manual dispatch
on:
  workflow_run:
    workflows: [CI]
    types: [completed]
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment Environment'
        type: choice
        options: [staging, production]
        required: true
      deployment_type:
        description: 'Deployment Type'
        type: choice
        options: [full, canary]
        required: true
      canary_percentage:
        description: 'Canary Traffic Percentage'
        type: number
        default: 10
        required: false

# Environment variables
env:
  AWS_REGION: us-east-1
  TF_VERSION: '1.5.0'
  DOCKER_BUILDKIT: '1'
  MONITORING_PERIOD_STAGING: '86400'
  MONITORING_PERIOD_PROD: '172800'
  ERROR_RATE_THRESHOLD: '0.001'
  RESPONSE_TIME_THRESHOLD: '3000'

jobs:
  prepare:
    name: Preparation
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    outputs:
      environment: ${{ steps.set-env.outputs.environment }}
    
    steps:
      - name: Set deployment environment
        id: set-env
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          else
            echo "environment=staging" >> $GITHUB_OUTPUT
          fi

  deploy-staging:
    name: Deploy to Staging
    needs: prepare
    if: needs.prepare.outputs.environment == 'staging'
    runs-on: ubuntu-latest
    environment: staging
    timeout-minutes: 30
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Download artifacts from CI
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts

      - name: Deploy Blue Environment
        run: |
          terraform -chdir=./infrastructure/terraform/environments/staging init
          terraform -chdir=./infrastructure/terraform/environments/staging apply -auto-approve \
            -var="environment=staging-blue" \
            -var="min_instances=2" \
            -var="max_instances=4"

      - name: Configure Monitoring
        uses: datadog/action-datadog-monitor@v1
        with:
          api_key: ${{ secrets.DATADOG_API_KEY }}
          app_key: ${{ secrets.DATADOG_APP_KEY }}
          monitor_config: |
            {
              "name": "Staging Deployment Monitor",
              "type": "metric alert",
              "query": "avg(last_5m):avg:system.cpu.user{environment:staging} > 70",
              "message": "Staging deployment CPU usage high"
            }

      - name: Run Health Checks
        run: |
          for i in {1..10}; do
            curl -f https://staging-blue.memorable.com/health || exit 1
            sleep 30
          done

      - name: Switch Traffic
        run: |
          aws elbv2 modify-listener \
            --listener-arn ${{ secrets.STAGING_LISTENER_ARN }} \
            --default-actions Type=forward,TargetGroupArn=${{ secrets.STAGING_BLUE_TG_ARN }}

      - name: Cleanup Green Environment
        if: success()
        run: |
          terraform -chdir=./infrastructure/terraform/environments/staging destroy -auto-approve \
            -var="environment=staging-green"

  deploy-production:
    name: Deploy to Production
    needs: [prepare, deploy-staging]
    if: |
      needs.prepare.outputs.environment == 'production' && 
      (needs.deploy-staging.result == 'success' || needs.deploy-staging.result == 'skipped')
    runs-on: ubuntu-latest
    environment: production
    timeout-minutes: 45
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Deploy Canary
        if: github.event.inputs.deployment_type == 'canary'
        run: |
          terraform -chdir=./infrastructure/terraform/environments/production init
          terraform -chdir=./infrastructure/terraform/environments/production apply -auto-approve \
            -var="environment=production-canary" \
            -var="min_instances=1" \
            -var="max_instances=2"

      - name: Configure Advanced Monitoring
        uses: datadog/action-datadog-monitor@v1
        with:
          api_key: ${{ secrets.DATADOG_API_KEY }}
          app_key: ${{ secrets.DATADOG_APP_KEY }}
          monitor_config: |
            {
              "name": "Production Deployment Monitor",
              "type": "metric alert",
              "query": "avg(last_5m):sum:trace.http.request.errors{env:production} / sum:trace.http.request.hits{env:production} > ${ERROR_RATE_THRESHOLD}",
              "message": "Production error rate exceeded threshold @pagerduty @slack-ops-alerts"
            }

      - name: Gradual Traffic Shift
        if: github.event.inputs.deployment_type == 'canary'
        run: |
          for percentage in 10 25 50 100; do
            aws elbv2 modify-listener \
              --listener-arn ${{ secrets.PROD_LISTENER_ARN }} \
              --default-actions '[
                {
                  "Type": "forward",
                  "ForwardConfig": {
                    "TargetGroups": [
                      {
                        "TargetGroupArn": "${{ secrets.PROD_CANARY_TG_ARN }}",
                        "Weight": '${percentage}'
                      },
                      {
                        "TargetGroupArn": "${{ secrets.PROD_STABLE_TG_ARN }}",
                        "Weight": '$((100-percentage))'
                      }
                    ]
                  }
                }
              ]'
            
            echo "Waiting for metrics after ${percentage}% traffic shift"
            sleep 900
            
            # Check error rates and response times
            if ! ./scripts/check-deployment-health.sh; then
              echo "Health check failed at ${percentage}% - rolling back"
              exit 1
            fi
          done

      - name: Full Production Deployment
        if: success() && github.event.inputs.deployment_type == 'full'
        run: |
          terraform -chdir=./infrastructure/terraform/environments/production apply -auto-approve \
            -var="environment=production" \
            -var="min_instances=3" \
            -var="max_instances=6"

      - name: Notify Deployment Status
        if: always()
        uses: slackapi/slack-github-action@v1.24.0
        with:
          channel-id: ${{ secrets.SLACK_CHANNEL_ID }}
          slack-message: |
            Deployment to ${{ needs.prepare.outputs.environment }} ${{ job.status }}
            Commit: ${{ github.sha }}
            Workflow: ${{ github.workflow }}
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}